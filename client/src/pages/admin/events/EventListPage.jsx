//client/src/pages/events/EventListPage.jsx
import React, { useEffect, useState } from "react";
import EventFilter from "../../../components/admin/EventList/EventFilter";
import EventTable from "../../../components/admin/EventList/EventTable";
import Pagination from "../../../components/admin/EventList/Pagination";
import { getEventStatus } from "../../../utils/getEventStatus";
import { useNavigate } from "react-router-dom";

import {
  getEvents,
  deleteEvent,
} from "../../../services/admin/event/eventService";

const EventListPage = () => {
  const [events, setEvents] = useState([]);
  const [page, setPage] = useState(1);
  const [limit] = useState(10);
  const [total, setTotal] = useState(0);
  const [filters, setFilters] = useState({});
  const [msg, setMsg] = useState("");
  const navigate = useNavigate();

  const loadEvents = async () => {
    try {
      const response = await getEvents({ page, limit, ...filters });

      // const response = await getEvents({
      //   page: "zys",
      //   limit: "abc",
      //   ...filters,
      // });

      const eventsWithStatus = response.events.map((ev) => ({
        ...ev,
        status: getEventStatus(ev),
      }));

      setEvents(eventsWithStatus);
      setTotal(response.total || 0);
      setMsg("");
    } catch (err) {
      let errorMessage = "";
      let statusCode = "";

      if (err.response) {
        statusCode = err.response.status;
        const serverMessage = err.response.data?.message || "";

        switch (statusCode) {
          case 400:
            errorMessage = `‚ùå L·ªói d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá (${statusCode})\n\nVui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin v√† th·ª≠ l·∫°i.`;
            break;
          case 401:
            errorMessage = `üîê Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n (${statusCode})\n\nVui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i ƒë·ªÉ ti·∫øp t·ª•c.`;
            break;
          case 403:
            errorMessage = `üö´ Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p (${statusCode})\n\nB·∫°n kh√¥ng c√≥ quy·ªÅn xem danh s√°ch s·ª± ki·ªán n√†y.`;
            break;
          case 404:
            errorMessage = `üîç Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu (${statusCode})\n\nDanh s√°ch s·ª± ki·ªán kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a.`;
            break;
          case 500:
            errorMessage = `‚ö†Ô∏è L·ªói h·ªá th·ªëng (${statusCode})\n\nH·ªá th·ªëng ƒëang g·∫∑p s·ª± c·ªë. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t.`;
            break;
          default:
            errorMessage = `‚ùó C√≥ l·ªói x·∫£y ra (${statusCode})\n\n${
              serverMessage || "Vui l√≤ng th·ª≠ l·∫°i sau."
            }`;
        }
      } else if (err.request) {
        errorMessage = `üåê L·ªói k·∫øt n·ªëi m·∫°ng\n\nKh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet.`;
      } else {
        errorMessage = `‚ùì L·ªói kh√¥ng x√°c ƒë·ªãnh\n\n${err.message}`;
      }

      alert(errorMessage);

      setEvents([]);
      setTotal(0);
      setMsg("");
    }
  };

  useEffect(() => {
    loadEvents();
  }, [page, filters]);

  const handleDelete = async (id) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a event n√†y?")) return;
    try {
      await deleteEvent(id);
      alert("‚úÖ X√≥a s·ª± ki·ªán th√†nh c√¥ng!");
      loadEvents();
    } catch (err) {
      console.error("++Error deleting event:", err);

      // X·ª≠ l√Ω l·ªói delete v·ªõi th√¥ng b√°o th√¢n thi·ªán
      let errorMessage = "";
      let statusCode = "";

      if (err.response) {
        statusCode = err.response.status;
        const serverMessage = err.response.data?.message || "";

        switch (statusCode) {
          case 400:
            errorMessage = `‚ùå Kh√¥ng th·ªÉ x√≥a s·ª± ki·ªán (${statusCode})\n\n${
              serverMessage || "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá."
            }`;
            break;
          case 401:
            errorMessage = `üîê Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n (${statusCode})\n\nVui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i ƒë·ªÉ ti·∫øp t·ª•c.`;
            break;
          case 403:
            errorMessage = `üö´ Kh√¥ng c√≥ quy·ªÅn x√≥a (${statusCode})\n\nB·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a s·ª± ki·ªán n√†y.`;
            break;
          case 404:
            errorMessage = `üîç S·ª± ki·ªán kh√¥ng t·ªìn t·∫°i (${statusCode})\n\nS·ª± ki·ªán c√≥ th·ªÉ ƒë√£ b·ªã x√≥a tr∆∞·ªõc ƒë√≥.`;
            break;
          case 500:
            errorMessage = `‚ö†Ô∏è L·ªói h·ªá th·ªëng (${statusCode})\n\nKh√¥ng th·ªÉ x√≥a s·ª± ki·ªán. Vui l√≤ng th·ª≠ l·∫°i sau.`;
            break;
          default:
            errorMessage = `‚ùó L·ªói x√≥a s·ª± ki·ªán (${statusCode})\n\n${
              serverMessage || "Vui l√≤ng th·ª≠ l·∫°i."
            }`;
        }
      } else if (err.request) {
        errorMessage = `üåê L·ªói k·∫øt n·ªëi\n\nKh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server ƒë·ªÉ x√≥a s·ª± ki·ªán.`;
      } else {
        errorMessage = `‚ùì L·ªói kh√¥ng x√°c ƒë·ªãnh\n\n${err.message}`;
      }

      alert(errorMessage);
    }
  };

  const handleFilter = (newFilters) => {
    setPage(1);
    setFilters(newFilters);
  };

  const handlePageChange = (newPage) => setPage(newPage);

  const goToEventsTable = () => {
    window.location.hash = "#events-table";
    document
      .getElementById("events-table")
      ?.scrollIntoView({ behavior: "smooth" });
  };



  return (
    <div className="p-6 bg-gray-100 min-h-screen">
      <h1 className="text-2xl font-bold mb-4">Event List</h1>

      <div className="mb-4">
      

        <button
          onClick={goToEventsTable}
          className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
        >
          ƒêi ƒë·∫øn b·∫£ng s·ª± ki·ªán
        </button>
      </div>

      
      <EventFilter onFilter={handleFilter} />
  

      <div id="events-table">
        <EventTable
          events={events}
          onDelete={handleDelete}
          page={page}
          limit={limit}
          onEdit={(id) => navigate(`/admin/events/edit/${id}`)}
        />
      </div>
      <Pagination
        total={total}
        page={page}
        limit={limit}
        onPageChange={handlePageChange}
      />
      {msg && <div className="mt-2 text-red-500">{msg}</div>}
    </div>
  );
};

export default EventListPage;
